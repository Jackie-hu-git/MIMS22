{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.\n",
    "Write a Python program that prints out a logo containing your name. Feel free to create your own design. Your design can be very simple, consisting of just a few print statements. For example, my logo is:\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "******  *\n",
      "   * *  *\n",
      "   * *  *\n",
      "   * ****\n",
      "   * *  *\n",
      "**** *  *\n",
      "Jackie Hu\n"
     ]
    }
   ],
   "source": [
    "# Creating a grid with 9 columns and 6 rows.\n",
    "for row in range(6):\n",
    "    for col in range(9):\n",
    "        '''\n",
    "        Printing rules:\n",
    "        - column 3,5,8 has stars\n",
    "        - at row 0, print stars without column position 6 and 7\n",
    "        - at row 3, print stars at column position 6 and 7\n",
    "        - at row 5, print stars at columnpositon 1 and 2\n",
    "        \n",
    "        '''\n",
    "        if col == 3 or col == 5 or col == 8 or (row == 0 and col != 7 and col != 6) or (row == 3 and col == 6) or (row == 3 and col == 7) or (row == 5 and col < 3):\n",
    "            # Print * whith an end\n",
    "            print(\"*\", end= \"\")\n",
    "        \n",
    "        # if not printing *, than leave blank, and go to the next position \n",
    "        else:\n",
    "            print(end= \" \") \n",
    "   \n",
    "    # Go to the next row        \n",
    "    print()\n",
    "    \n",
    "# print my name \n",
    "print(\"Jackie Hu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. \n",
    "Write a Python program that sketches (using the drawSvg library) your favorite logo. Your logo need not be overly complex, but should incorporate the use of at least five drawSvg library function calls. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: drawSvg in c:\\users\\sherr\\anaconda3\\lib\\site-packages (1.6.1)\n",
      "Requirement already satisfied: cairoSVG in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from drawSvg) (2.4.2)\n",
      "Requirement already satisfied: numpy in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from drawSvg) (1.18.1)\n",
      "Requirement already satisfied: imageio in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from drawSvg) (2.6.1)\n",
      "Requirement already satisfied: cssselect2 in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from cairoSVG->drawSvg) (0.3.0)\n",
      "Requirement already satisfied: tinycss2 in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from cairoSVG->drawSvg) (1.0.2)\n",
      "Requirement already satisfied: pillow in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from cairoSVG->drawSvg) (7.0.0)\n",
      "Requirement already satisfied: defusedxml in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from cairoSVG->drawSvg) (0.6.0)\n",
      "Requirement already satisfied: cairocffi in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from cairoSVG->drawSvg) (1.1.0)\n",
      "Requirement already satisfied: webencodings in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from cssselect2->cairoSVG->drawSvg) (0.5.1)\n",
      "Requirement already satisfied: setuptools>=39.2.0 in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from cssselect2->cairoSVG->drawSvg) (45.2.0.post20200210)\n",
      "Requirement already satisfied: cffi>=1.1.0 in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from cairocffi->cairoSVG->drawSvg) (1.14.0)\n",
      "Requirement already satisfied: pycparser in c:\\users\\sherr\\anaconda3\\lib\\site-packages (from cffi>=1.1.0->cairocffi->cairoSVG->drawSvg) (2.19)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "# install the drawSvg package\n",
    "pip install drawSvg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 403,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n",
       "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n",
       "     width=\"200\" height=\"200\" viewBox=\"-100.0 -100.0 200 200\">\n",
       "<defs>\n",
       "</defs>\n",
       "<circle cx=\"-25\" cy=\"-65\" r=\"29\" fill=\"red\" stroke-width=\"5\" stroke=\"red\" />\n",
       "<circle cx=\"25\" cy=\"-65\" r=\"29\" fill=\"red\" stroke-width=\"5\" stroke=\"red\" />\n",
       "<ellipse cx=\"-25\" cy=\"-60\" rx=\"19\" ry=\"13\" stroke=\"black\" stroke-width=\"1\" fill=\"white\" />\n",
       "<circle cx=\"-24\" cy=\"-58\" r=\"5\" fill=\"black\" />\n",
       "<ellipse cx=\"25\" cy=\"-60\" rx=\"19\" ry=\"13\" stroke=\"black\" stroke-width=\"1\" fill=\"white\" />\n",
       "<circle cx=\"26\" cy=\"-58\" r=\"5\" fill=\"black\" />\n",
       "<text x=\"0\" y=\"50\" font-size=\"10\" text-anchor=\"middle\">COMME DES GARÇONS PLAY</text>\n",
       "<path d=\"M0,6 l-45,-50 h90 Z\" stroke-width=\"3\" stroke=\"red\" fill=\"red\" />\n",
       "</svg>"
      ],
      "text/plain": [
       "<drawSvg.drawing.Drawing at 0xa1f7670>"
      ]
     },
     "execution_count": 403,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import package and rename it to draw\n",
    "import drawSvg as draw\n",
    "\n",
    "# Initial the canvas with size 200 by 200. Set the origin to the center. \n",
    "d = draw.Drawing(200,200, origin='center')\n",
    "\n",
    "'''\n",
    "- draw the top of the heart, which has 2 red circles. \n",
    "- draw the bottom of the heart, which is a triangle.\n",
    "- draw the eyes, which consist of a white ellipse with black stroke, and a black circle as the pupil.\n",
    "\n",
    "'''\n",
    "\n",
    "# Start path at point (-25, 65), whith radius of 29, fill with red. \n",
    "d.append(draw.Circle(-25, 65, 29,\n",
    "            fill='red', stroke_width=5, stroke='red')) \n",
    "\n",
    "# Start path at point (25, 65), whith radius of 29, fill with red. \n",
    "d.append(draw.Circle(25, 65, 29,\n",
    "            fill='red', stroke_width=5, stroke='red'))\n",
    "\n",
    "# Draw a triangle as the bottom part.\n",
    "p = draw.Path(stroke_width=3, stroke='red',\n",
    "              fill='red')\n",
    "\n",
    "p.M(0,-6)  # Start path at point (0, 0)\n",
    "p.l(-45,50)  # Draw line to (60, 30)\n",
    "p.h(90)    # Draw horizontal line to x=-70\n",
    "p.Z()       # Draw line to start\n",
    "\n",
    "\n",
    "# Start ellipse path at (-25,60), with height of 13, length of 19, fill with white with black stroke. \n",
    "d.append(draw.Ellipse(-25,60,19,13, stroke='black', stroke_width=1,fill=\"white\"))\n",
    "\n",
    "# Draw black circle at point (-24, 58), whith radius of 5. \n",
    "d.append(draw.Circle(-24,58, 5,fill='black'))\n",
    "\n",
    "# same for the other half. \n",
    "d.append(draw.Ellipse(25,60,19,13, stroke='black', stroke_width=1,fill=\"white\"))\n",
    "d.append(draw.Circle(26,58, 5,fill='black'))\n",
    "\n",
    "# Print the Logo name at position(0,-50), with size of 10.  \n",
    "d.append(draw.Text(\"COMME DES GARÇONS PLAY\",10,0,-50,20,20))\n",
    "\n",
    "# append all the elements, and print the canvas. \n",
    "d.append(p)\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
