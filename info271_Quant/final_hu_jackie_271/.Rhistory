df$degree_factor[df$degree == 3] = "COLLEGE"
df$degree_factor[df$degree == 4] = "GRADUATE"
df$degree_factor[df$degree == 8 & df$degree == 9] = "NA"
view(df)
df$degree_factor[df$degree == 0] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 1] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 1] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 2] = "COLLEGE"
df$degree_factor[df$degree == 3] = "COLLEGE"
df$degree_factor[df$degree == 4] = "GRADUATE"
df$degree_factor[df$degree == 8 & df$degree == 9] = "NA"
View(df)
table(df$degree_factor)
df <- lab3_GSS[, c("degree", "gunlaw")]
df <- lab3_GSS[, c("degree", "gunlaw")]
df$degree_factor = NA
df
df$degree_factor[df$degree == 0] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 1] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 1] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 2] = "COLLEGE"
df$degree_factor[df$degree == 3] = "COLLEGE"
df$degree_factor[df$degree == 4] = "GRADUATE"
df$degree_factor[df$degree == 8 & df$degree == 9] = "NA"
View(df)
df$gun_factor[df$gunlaw == 1] = "Favor"
df$gun_factor[df$gunlaw == 2] = "Oppose"
df$gun_factor[df$gunlaw == 8] = "Don’t know"
df$gun_factor[df$gunlaw == 9 & df$gunlaw == 0] = "NA"
View(df)
table(df$degree_factor)
View(df)
table(df$degree_factor)
table(df$gun_factor)
table(df$degree_factor, df$gun_factor)
test <- chisq.test(table(df$degree_factor, df$gun_factor))
test
test <- chisq.test(table(df$degree_factor, df$gun_factor))
test
test$statistic
test$p.value
summary((table(df$degree_factor, df$gun_factor)))
test <- chisq.test(table(df$degree_factor, df$gun_factor))
test
test$statistic
test$p.value
test$expected
test_fisher <- fisher.test((table(df$degree_factor, df$gun_factor)))
test_fisher
df2 <- lab3_GSS[, c("educ", "childs")]
df2
df <- lab3_GSS[, c("degree", "gunlaw")]
df$degree_factor = NA
df$gun_factor = NA
df
df$degree_factor[df$degree == 0] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 1] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 1] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 2] = "COLLEGE"
df$degree_factor[df$degree == 3] = "COLLEGE"
df$degree_factor[df$degree == 4] = "GRADUATE"
df$degree_factor[df$degree == 8 & df$degree == 9] = NA
df$gun_factor[df$gunlaw == 1] = "Favor"
df$gun_factor[df$gunlaw == 2] = "Oppose"
df$gun_factor[df$gunlaw == 8] = "Don’t know"
df$gun_factor[df$gunlaw == 9 & df$gunlaw == 0] = NA
View(df)
table(df$degree_factor)
table(df$gun_factor)
table(df$degree_factor, df$gun_factor)
test <- chisq.test(table(df$degree_factor, df$gun_factor))
test
test$statistic
test$p.value
test$expected
summary((table(df$degree_factor, df$gun_factor)))
test_fisher <- fisher.test((table(df$degree_factor, df$gun_factor)))
test_fisher
df2 <- lab3_GSS[, c("educ", "childs")]
df2$educ[df2$educ == 99] = NA
df2$educ[df2$educ == 98] = NA
df2$childs[df2$childs == 9] = NA
df2
cor.test(df2$educ, df2$childs)
CrossTable(df$degree_factor, df$gun_factor,fisher = TRUE, chisq = TRUE, expected = TRUE, sresid = FALSE, format = "SPSS" )
CrossTable(df$degree_factor, df$gun_factor,fisher = TRUE, chisq = TRUE, expected = TRUE, sresid = TRUE, format = "SPSS" )
cramersV(df$degree_factor, df$gun_factor)
df3 <- lab3_GSS[, c("expdesgn", "wwwhr")]
df3$exp_factor = NA
df3$exp_factor[df3$expdesgn == 1] = 'No Control'
df3$exp_factor[df3$expdesgn == 2] = "Control"
df3$exp_factor[df3$expdesgn == 8 & df3$expdesgn == 9 & df3$expdesgn == 0] = NA
df3$wwwhr[df3$wwwhr == -1 & df3$wwwhr == 998 & df3$wwwhr == 999] = NA
df3
df3 <- lab3_GSS[, c("expdesgn", "wwwhr")]
df3$exp_factor = NA
df3$exp_factor[df3$expdesgn == 1] = 'No Control'
df3$exp_factor[df3$expdesgn == 2] = "Control"
df3$exp_factor[df3$expdesgn == 8 & df3$expdesgn == 9 & df3$expdesgn == 0] = NA
df3$wwwhr[df3$wwwhr == -1 & df3$wwwhr == 998 & df3$wwwhr == 999] = NA
df3
df3 <- lab3_GSS[, c("expdesgn", "wwwhr")]
df3$exp_factor = NA
df3$exp_factor[df3$expdesgn == 1] = 'No Control'
df3$exp_factor[df3$expdesgn == 2] = "Control"
df3$exp_factor[df3$expdesgn == 8 & df3$expdesgn == 9 & df3$expdesgn == 0] = NA
df3$wwwhr[df3$wwwhr == -1] = NA
df3
df3 <- lab3_GSS[, c("expdesgn", "wwwhr")]
df3$exp_factor = NA
df3$exp_factor[df3$expdesgn == 1] = 'No Control'
df3$exp_factor[df3$expdesgn == 2] = "Control"
df3$exp_factor[df3$expdesgn == 8 & df3$expdesgn == 9 & df3$expdesgn == 0] = NA
df3$wwwhr[df3$wwwhr == -1] = NA
df3$wwwhr[df3$wwwhr == 998] = NA
df3$wwwhr[df3$wwwhr == 999] = NA
df3
qqnorm(df3$wwwhr)
shapiro.test(df3$wwwhr)
shapiro.test(df3$wwwhr)
ind.t.test <- t.test(df3$wwwhr ~ df3$exp_factor, expdesign)
ind.t.test <- t.test(df3$wwwhr ~ df3$exp_factor, df3)
ind.t.test
#highly significant, reject the null, therefore not normal
shapiro.test(df3$wwwhr)
levels(df3$exp_factor)
df3 <- lab3_GSS[, c("expdesgn", "wwwhr")]
df3$exp_factor = NA
df3$exp_factor[df3$expdesgn == 1] = 'No Control'
df3$exp_factor[df3$expdesgn == 2] = "Control"
df3$exp_factor[df3$expdesgn == 8 & df3$expdesgn == 9 & df3$expdesgn == 0] = NA
df3$wwwhr[df3$wwwhr == -1] = NA
df3$wwwhr[df3$wwwhr == 998] = NA
df3$wwwhr[df3$wwwhr == 999] = NA
df3
levels(df3$exp_factor)
df3$exp_factor <- factor(df3$exp_factor)
levels(df3$exp_factor)
t.test(df3$wwwhr ~ df3$exp_factor, alternative = "more", data = df3)
t.test(df3$wwwhr ~ df3$exp_factor, alternative = "greater", data = df3)
ind.t.test <- t.test(df3$wwwhr ~ df3$exp_factor, alternative = "greater", data = df3)
ind.t.test
t <- ind.t.test$statistic[[1]]
df <- ind.t.test$parameter[[1]]
r <- sqrt(t ^ 2/(t^2 + df))
round(r, 3)
cohensD(df3$wwwhr ~ df3$exp_factor)
library("ggplot")
iinstall.packages("ggplot")
install.packages("ggplot")
library("ggplot")
install.packages("ggplot")
library(ggplot2)
ggplot(na.omit(df3[,c("wwwhr, 'exp_factor")]), aes(x = wwwhr, fill= exp_factor) + geom_density(alpha= .5))
ggplot(na.omit(df3[,c("wwwhr, 'exp_factor")]), aes(x = wwwhr, fill= exp_factor)) + geom_density(alpha= .5)
ggplot(na.omit(df3[,c("wwwhr", 'exp_factor')]), aes(x = wwwhr, fill= exp_factor)) + geom_density(alpha= .5)
#run the approriate effect size test using Cramers'v
cramersV(df$degree_factor, df$gun_factor)
table(df$degree_factor, df$gun_factor)
table(df$degree_factor, df$gun_factor)
df <- lab3_GSS[, c("degree", "gunlaw")]
df$degree_factor = NA
df$gun_factor = NA
df
df$degree_factor[df$degree == 0] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 1] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 1] = "HIGH SCHOOL OR LESS"
df$degree_factor[df$degree == 2] = "COLLEGE"
df$degree_factor[df$degree == 3] = "COLLEGE"
df$degree_factor[df$degree == 4] = "GRADUATE"
df$degree_factor[df$degree == 8 & df$degree == 9] = NA
df$gun_factor[df$gunlaw == 1] = "Favor"
df$gun_factor[df$gunlaw == 2] = "Oppose"
df$gun_factor[df$gunlaw == 8] = "Don’t know"
df$gun_factor[df$gunlaw == 9 & df$gunlaw == 0] = NA
View(df)
table(df$degree_factor, df$gun_factor)
summary((table(df$degree_factor, df$gun_factor)))
test_fisher <- fisher.test((table(df$degree_factor, df$gun_factor)))
test_fisher
#run the approriate effect size test using Cramers'v
cramersV(df$degree_factor, df$gun_factor)
levene.test(df3$wwwhr ~ df3$exp_factor, df3, center = mean)
leveneTest(df3$wwwhr ~ df3$exp_factor, df3, center = mean)
getwd()
dat = read.csv("dating.csv", header = TRUE)
setwd(C:\Users\12062\Documents)
setwd(C:/Users/12062/Documents)
setwd("C:/Users/12062/Documents")
dat = read.csv("Dating.csv", header = TRUE)
setwd("C:/Users/12062/Documents")
dat = read.csv("Dating.csv", header = TRUE)
setwd("C:/Users/12062/Documents/final_hu_jackie_271")
dat = read.csv("Dating.csv", header = TRUE)
class(dat$life_quality)
dat$life_quality[df$life_quality == 8 & df$life_quality == 9] = NA
dat$life_quality[df$life_quality == 8 & df$life_quality == 9] = NA
View(dat)
dat$life_quality[df$life_quality == 'Refused' & df$life_quality == '
Don't know'] = NA
dat$life_quality[df$life_quality == 'Refused' & df$life_quality == '
Don''t know'] = NA
dat$life_quality[df$life_quality == 'Refused' & df$life_quality == "
Don't know"] = NA
dat$good_life_quality = NA
dat$good_life_quality[df$life_quality == 'Refused' & df$life_quality == "
Don't know"] = NA
dat$good_life_quality[dat$life_quality == 1] = "poor"
dat$good_life_quality[dat$life_quality == 'Refused' & dat$life_quality == "
Don't know"] = NA
dat$good_life_quality[dat$life_quality == 1] = "Poor"
dat$good_life_quality[dat$life_quality == 2] = "Fair"
dat$good_life_quality[dat$life_quality == 3] = "Good"
dat$good_life_quality[dat$life_quality == 4] = "Very good"
dat$good_life_quality[dat$life_quality == 5] = "Excellent"
dat$good_life_quality[dat$life_quality == 'Refused' & dat$life_quality == "
Don't know"] = NA
View(dat)
summary(dat$good_life_quality)
table(dat$good_life_quality, dat$life_quality)
summary(dat$good_life_quality)
dat$good_life_quality = NA
dat$married = NA
dat$income_50K = NA
dat$age = NA
dat$married[dat$marital_status == "Married"] = 1
dat$married[dat$marital_status == "Never been married" & dat$marital_status == "Separated" & dat$marital_status == "Widowed"] = 0
dat$married[dat$marital_status == "Married"] = 1
dat$married[dat$marital_status == "Never been married" & dat$marital_status == "Separated" & dat$marital_status == "Widowed" & dat$marital_status == "Living with partner" & dat$marital_status == "Divorced" ] = 0
dat$income_50K[dat$income <= 5] = 0
dat$income_50K[dat$income >= 6] = 1
dat$income_50K[dat$income == 98 & dat$income == 99] = NA
setwd("C:/Users/12062/Documents/final_hu_jackie_271")
dat = read.csv("Dating.csv", header = TRUE)
dat$good_life_quality = NA
dat$married = NA
dat$income_50K = NA
dat$good_life_quality[dat$life_quality == 1] = "Poor"
dat$good_life_quality[dat$life_quality == 2] = "Fair"
dat$good_life_quality[dat$life_quality == 3] = "Good"
dat$good_life_quality[dat$life_quality == 4] = "Very good"
dat$good_life_quality[dat$life_quality == 5] = "Excellent"
table(dat$good_life_quality, dat$life_quality)
summary(dat$good_life_quality)
dat$married[dat$marital_status == "Married"] = 1
dat$married[dat$marital_status == "Never been married" & dat$marital_status == "Separated" & dat$marital_status == "Widowed" & dat$marital_status == "Living with partner" & dat$marital_status == "Divorced" ] = 0
dat$income_50K[dat$income <= 5] = 0
dat$income_50K[dat$income >= 6] = 1
dat$income_50K[dat$income == 98 & dat$income == 99] = NA
dat$age[dat$age == 98 & dat$age == 99] = NA
Dating_lim <- dat[,c("good_life_quality")]
Dating_lim <- dat[,c("good_life_quality", "married","income_50K","age")]
View(Dating_lim)
dat$age[dat$age == '98' & dat$age == '99'] = NA
Dating_lim <- dat[,c("good_life_quality", "married","income_50K","age")]
dat$age[dat$age == 98 & dat$age == 99] = NA
dat$married[dat$marital_status == "Married"] = 1
dat$married[dat$marital_status == "Never been married" & dat$marital_status == "Separated" & dat$marital_status == "Widowed" & dat$marital_status == "Living with partner" & dat$marital_status == "Divorced" ] = 0
View(Dating_lim)
dat$age[dat$age == 98 || dat$age == 99] = NA
dat$age[dat$age == 98] = NA
dat$age[dat$age == 99] = NA
View(Dating_lim)
dat$age[dat$age == '98'] = NA
dat$age[dat$age == '99'] = NA
Dating_lim <- dat[,c("good_life_quality", "married","income_50K","age")]
View(Dating_lim)
setwd("C:/Users/12062/Documents/final_hu_jackie_271")
dat = read.csv("Dating.csv", header = TRUE)
dat$good_life_quality = NA
dat$married = NA
dat$income_50K = NA
dat$good_life_quality[dat$life_quality == 1] = "Poor"
dat$good_life_quality[dat$life_quality == 2] = "Fair"
dat$good_life_quality[dat$life_quality == 3] = "Good"
dat$good_life_quality[dat$life_quality == 4] = "Very good"
dat$good_life_quality[dat$life_quality == 5] = "Excellent"
dat$married[dat$marital_status == "Married"] = 1
dat$married[dat$marital_status == "Never been married" || dat$marital_status == "Separated" || dat$marital_status == "Widowed" || dat$marital_status == "Living with partner" || dat$marital_status == "Divorced" ] = 0
dat$income_50K[dat$income <= 5] = 0
dat$income_50K[dat$income >= 6] = 1
dat$income_50K[dat$income == 98 || dat$income == 99] = NA
dat$age[dat$age == 98] = NA
dat$age[dat$age == 99] = NA
Dating_lim <- dat[,c("good_life_quality", "married","income_50K","age")]
View(Dating_lim)
dat$married[dat$marital_status == "Married"] = 1
dat$married[dat$marital_status == "Never been married"] = 0
dat$married[dat$marital_status == "Separated"] = 0
dat$married[dat$marital_status == "Widowed"] = 0
dat$married[dat$marital_status == "Living with partner"] = 0
dat$married[dat$marital_status == "Divorced"] = 0
Dating_lim <- dat[,c("good_life_quality", "married","income_50K","age")]
View(Dating_lim)
summary(Dating_lim)
dim(Dating_lim)
dat$income_50K[dat$income <= 5] = 0
dat$income_50K[dat$income >= 6] = 1
dat$income_50K[dat$income == 98] = NA
dat$income_50K[dat$income == 99] = NA
dat$good_life_quality[dat$life_quality == 'Refused' & dat$life_quality == "
Don't know"] = NA
table(dat$good_life_quality, dat$life_quality)
summary(dat$good_life_quality)
Dating_lim <- dat[,c("good_life_quality", "married","income_50K","age")]
View(Dating_lim)
summary(Dating_lim)
dim(Dating_lim)
hist(Dating_lim$good_life_quality)
dat$good_life_quality[dat$life_quality == 1] = 5
dat$good_life_quality[dat$life_quality == 2] = 4
dat$good_life_quality[dat$life_quality == 3] = 4
dat$good_life_quality[dat$life_quality == 4] = 3
dat$good_life_quality[dat$life_quality == 5] = 1
Dating_lim <- dat[,c("good_life_quality", "married","income_50K","age")]
View(Dating_lim)
summary(Dating_lim)
dim(Dating_lim)
hist(Dating_lim$good_life_quality)
class(Dating_lim$good_life_quality)
num1 <- as.numeric(Dating_lim$good_life_quality)
hist(num1)
dat$good_life_quality[dat$life_quality == 1] = 5
dat$good_life_quality[dat$life_quality == 2] = 4
dat$good_life_quality[dat$life_quality == 3] = 3
dat$good_life_quality[dat$life_quality == 4] = 2
dat$good_life_quality[dat$life_quality == 5] = 1
Dating_lim <- dat[,c("good_life_quality", "married","income_50K","age")]
num1 <- as.numeric(Dating_lim$good_life_quality)
hist(num1)
library(car)
lim_rows = complete.cases(Dating_lim$good_life_quality, Dating_lim$married, Dating_lim$income_50K, Dating_lim$age)
life_quant = Dating_lim[lim_rows]
life_quant = good_life_quality[lim_rows]
life_quant = Dating_lim[lim_rows]
life_quant = good_life_quality[lim_rows]
life_quant = Dating_lim$good_life_quality[lim_rows]
model1 = lm(good_life_quality - married, data = life_quant)
model1 = lm(Dating_lim$good_life_quality - married, data = life_quant)
life_quant = Dating_lim$good_life_quality[lim_rows,]
model1 = lm(good_life_quality - married, data = Dating_lim)
dim(Dating_lim)
View(Dating_lim)
num1 <- as.numeric(Dating_lim$good_life_quality)
hist(num1)
model1 = lm(good_life_quality - married, data = Dating_lim)
model1 = lm(Dating_lim$good_life_quality - Dating_lim$married, data = Dating_lim)
model1 = lm(good_life_quality ~ married, data = Dating_lim)
summary(model1)
model1 = lm(good_life_quality ~ married, data = lim_rows)
lim_rows = complete.cases(Dating_lim$good_life_quality, Dating_lim$married, Dating_lim$income_50K, Dating_lim$age)
Dating_lim = Dating_lim[lim_rows,]
model1 = lm(good_life_quality ~ married, data = Dating_lim)
summary(model1)
model2 = lm(good_life_quality ~ married + income_50K, data = Dating_lim)
summary(model2)
model3 = lm(good_life_quality ~ married + income_50K + ages, data = Dating_lim)
model3 = lm(good_life_quality ~ married + income_50K + age, data = Dating_lim)
summary(model3)
Anova(model1, model2)
Anova(model1, model3)
Anova(model2, model3)
ncvTest(model3)
plot(model3)
spreadLevelPlot(model3)
AIC(model1)
AIC(model2)
AIC(model3)
#reverse code the variables
dat$good_life_quality[dat$life_quality == 1] = 5
dat$good_life_quality[dat$life_quality == 2] = 4
dat$good_life_quality[dat$life_quality == 3] = 3
dat$good_life_quality[dat$life_quality == 4] = 2
dat$good_life_quality[dat$life_quality == 5] = 1
#setting up NA
dat$good_life_quality[dat$life_quality == 'Refused'] = NA
dat$good_life_quality[dat$life_quality == "Don't know"] = NA
#checking the summary
table(dat$good_life_quality, dat$life_quality)
summary(dat$good_life_quality)
#recode the married caterogies
dat$married[dat$marital_status == "Married"] = 1
dat$married[dat$marital_status == "Never been married"] = 0
dat$married[dat$marital_status == "Separated"] = 0
dat$married[dat$marital_status == "Widowed"] = 0
dat$married[dat$marital_status == "Living with partner"] = 0
dat$married[dat$marital_status == "Divorced"] = 0
dat$married[dat$marital_status == "Refused"] = NA
#encode the married categories
dat$married[dat$marital_status == "Married"] = 1
dat$married[dat$marital_status == "Never been married"] = 0
dat$married[dat$marital_status == "Separated"] = 0
dat$married[dat$marital_status == "Widowed"] = 0
dat$married[dat$marital_status == "Living with partner"] = 0
dat$married[dat$marital_status == "Divorced"] =
dat$married[dat$marital_status == "Don’t know"] = 0
dat$married[dat$marital_status == "Refused"] = NA
#encode the income categories
dat$income_50K[dat$income <= 5] = 0
dat$income_50K[dat$income >= 6] = 1
dat$income_50K[dat$income == 98] = NA
dat$income_50K[dat$income == 99] = NA
#encode the age categories
dat$age[dat$age == 98] = NA
dat$age[dat$age == 99] = NA
#creating a dataframe contains 4 variables
Dating_lim <- dat[,c("good_life_quality", "married","income_50K","age")]
View(Dating_lim)
summary(Dating_lim)
summary(Dating_lim)
dim(Dating_lim)
#OLS model that predicts good_life_quality as a function of married
model1 = lm(good_life_quality ~ married, data = Dating_lim)
summary(model1)
#only grabbing the complete cases
lim_rows = complete.cases(Dating_lim$good_life_quality, Dating_lim$married, Dating_lim$income_50K, Dating_lim$age)
Dating_lim = Dating_lim[lim_rows,]
#OLS model that predicts good_life_quality as a function of married
model1 = lm(good_life_quality ~ married, data = Dating_lim)
summary(model1)
#OLS model that predicts good_life_quality as a function of married and income
model2 = lm(good_life_quality ~ married + income_50K, data = Dating_lim)
summary(model2)
#OLS model that predicts good_life_quality as a function of married,income and ages.
model3 = lm(good_life_quality ~ married + income_50K + age, data = Dating_lim)
summary(model3)
#compute F-statistics between model 1 and model 2
Anova(model1, model2)
#compute F-statistics between model 1 and model 2
Anova(model1, model2)
#compute F-statistics between model 1 and model 2
anova(model1, model2)
#compute F-statistics between model 2 and model 3
anova(model2, model3)
ncvTest(model3)
spreadLevelPlot(model3)
#OLS model that applies the power transformation.
model3 = lm((good_life_quality^0.623596 ) ~ married + income_50K + age, data = Dating_lim)
#OLS model that applies the power transformation.
model3 = lm((good_life_quality)^0.623596 ) ~ married + income_50K + age, data = Dating_lim)
#OLS model that applies the power transformation.
model3 = lm((good_life_quality ^0.623596 ) ~ married + income_50K + age, data = Dating_lim)
#OLS model that applies the power transformation.
model3 = lm(((good_life_quality) ^ 0.623596 ) ~ married + income_50K + age, data = Dating_lim)
#OLS model that applies the power transformation.
model3 = lm((as.numeric(good_life_quality) ^ 0.623596 ) ~ married + income_50K + age, data = Dating_lim)
summary(model3)
ncvTest(model3)
ncvTest(model3)
spreadLevelPlot(model3)
#OLS model that applies the power transformation.
model4 = lm((as.numeric(good_life_quality) ^ 0.623596 ) ~ married + income_50K + age, data = Dating_lim)
summary(model4)
ncvTest(model4)
ncvTest(model4)
spreadLevelPlot(model3)
ncvTest(model4)
spreadLevelPlot(model4)
ncvTest(model3)
spreadLevelPlot(model3)
plot(model3)
ncvTest(model3)
spreadLevelPlot(model3)
hist(Dating_lim$good_life_quality)
ncvTest(model3)
spreadLevelPlot(model3)
hist(as.numeric(Dating_lim$good_life_quality)
ncvTest(model3)
spreadLevelPlot(model3)
#checking the distribution of the data real quick
num1 <- as.numeric(Dating_lim$good_life_quality)
hist(num1)
#checking the distribution of the data real quick
num1 <- as.numeric(Dating_lim$good_life_quality)
hist(num1)
num2 <- num1^ 0.8920433
hist(num2)
#OLS model that applies the power transformation.
model4 = lm((as.numeric(Dating_lim$good_life_quality))^0.8920433 ~ married + income_50K + age, data = Dating_lim)
summary(model4)
ncvTest(model4)
ncvTest(model4)
spreadLevelPlot(model4)
model5 = lm(((as.numeric(Dating_lim$good_life_quality))^0.8920433)^ 0.6425141 ~ married + income_50K + age, data = Dating_lim)
ncvTest(model5)
#OLS model that applies the power transformation.
model4 = lm((as.numeric(good_life_quality)^0.8920433) ~ married + income_50K + age, data = Dating_lim)
summary(model4)
ncvTest(model4)
spreadLevelPlot(model4)
plot(model4)
ncvTest(model4)
spreadLevelPlot(model4)
#OLS model that applies the power transformation.
model4 = lm((as.numeric(good_life_quality)^0.8920433)^ 0.6425141  ~ married + income_50K + age, data = Dating_lim)
summary(model4)
plot(model4)
ncvTest(model4)
spreadLevelPlot(model4)
#OLS model that applies the power transformation.
model4 = lm((as.numeric(good_life_quality)^0.8920433)^ 0.6425141^1.019964   ~ married + income_50K + age, data = Dating_lim)
summary(model4)
plot(model4)
ncvTest(model4)
spreadLevelPlot(model4)
ncvTest(model4)
spreadLevelPlot(model4)
#OLS model that applies the power transformation.
model4 = lm((as.numeric(good_life_quality)^0.8920433) ~ married + income_50K + age, data = Dating_lim)
summary(model4)
ncvTest(model4)
spreadLevelPlot(model4)
